From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Pancakse <pancakseyt@gmail.com>
Date: Fri, 22 Dec 2023 13:09:46 -0700
Subject: [PATCH] Krypton

Remodified Version of Graphenes Krypton Patches


diff --git a/src/main/java/net/minecraft/network/Utf8String.java b/src/main/java/net/minecraft/network/Utf8String.java
index 7b39060cde0ec31c4adf36960b33cefcd5138527..783cd68b7db5a952085068561ff22c4ab84ccf12 100644
--- a/src/main/java/net/minecraft/network/Utf8String.java
+++ b/src/main/java/net/minecraft/network/Utf8String.java
@@ -31,6 +31,8 @@ public class Utf8String {
     }
 
     public static void write(ByteBuf buf, CharSequence string, int length) {
+        // Graphene start - krypton: optimized version
+        /*
         if (string.length() > length) {
             throw new EncoderException("String too big (was " + string.length() + " characters, max " + length + ")");
         } else {
@@ -51,5 +53,22 @@ public class Utf8String {
             }
 
         }
+        */
+        // Graphene end
+
+        // Graphene start - krypton: network.microopt
+        // Mojang _almost_ gets it right, but stumbles at the finish line...
+        if (string.length() > length) {
+            throw new EncoderException("String too big (was " + string.length() + " characters, max " + length + ")");
+        }
+        int utf8Bytes = ByteBufUtil.utf8Bytes(string);
+        int maxBytesPermitted = ByteBufUtil.utf8MaxBytes(length);
+        if (utf8Bytes > maxBytesPermitted) {
+            throw new EncoderException("String too big (was " + utf8Bytes + " bytes encoded, max " + maxBytesPermitted + ")");
+        } else {
+            VarInt.write(buf, utf8Bytes);
+            buf.writeCharSequence(string, StandardCharsets.UTF_8);
+        }
+        // Graphene end
     }
 }
diff --git a/src/main/java/net/minecraft/network/VarInt.java b/src/main/java/net/minecraft/network/VarInt.java
index 18d5a22ad3ef4cb279475531dbc2c65e07c69929..06d35230679aa3ee7df72945ae6847f1e0011448 100644
--- a/src/main/java/net/minecraft/network/VarInt.java
+++ b/src/main/java/net/minecraft/network/VarInt.java
@@ -3,12 +3,18 @@ package net.minecraft.network;
 import io.netty.buffer.ByteBuf;
 
 public class VarInt {
+    // Graphene start - now unused
+    /*
     private static final int MAX_VARINT_SIZE = 5;
     private static final int DATA_BITS_MASK = 127;
     private static final int CONTINUATION_BIT_MASK = 128;
     private static final int DATA_BITS_PER_BYTE = 7;
+    */
+    // Graphene end
 
     public static int getByteSize(int i) {
+        // Graphene start - krypton: optimized version
+        /*
         for(int j = 1; j < 5; ++j) {
             if ((i & -1 << j * 7) == 0) {
                 return j;
@@ -16,6 +22,10 @@ public class VarInt {
         }
 
         return 5;
+        */
+        // Graphene end
+
+        return me.steinborn.krypton.network.util.VarIntUtil.getVarIntLength(i); // Graphene - krypton: network.microopt
     }
 
     public static boolean hasContinuationBit(byte b) {
@@ -39,6 +49,8 @@ public class VarInt {
     }
 
     public static ByteBuf write(ByteBuf buf, int i) {
+        // Graphene start - krypton: optimized version
+        /*
         while((i & -128) != 0) {
             buf.writeByte(i & 127 | 128);
             i >>>= 7;
@@ -46,5 +58,46 @@ public class VarInt {
 
         buf.writeByte(i);
         return buf;
+        */
+        // Graphene end
+
+        // Graphene start - krypton: network.microopt
+        // Peel the one and two byte count cases explicitly as they are the most common VarInt sizes
+        // that the server will send, to improve inlining.
+        if ((i & (0xFFFFFFFF << 7)) == 0) {
+            buf.writeByte(i);
+        } else if ((i & (0xFFFFFFFF << 14)) == 0) {
+            int w = (i & 0x7F | 0x80) << 8 | (i >>> 7);
+            buf.writeShort(w);
+        } else {
+            writeVarIntFull(buf, i);
+        }
+
+        return buf;
+        // Graphene end
+    }
+
+    // Graphene start - krypton: network.microopt
+    private static void writeVarIntFull(ByteBuf buf, int i) {
+        // See https://steinborn.me/posts/performance/how-fast-can-you-write-a-varint/
+        if ((i & (0xFFFFFFFF << 7)) == 0) {
+            buf.writeByte(i);
+        } else if ((i & (0xFFFFFFFF << 14)) == 0) {
+            int w = (i & 0x7F | 0x80) << 8 | (i >>> 7);
+            buf.writeShort(w);
+        } else if ((i & (0xFFFFFFFF << 21)) == 0) {
+            int w = (i & 0x7F | 0x80) << 16 | ((i >>> 7) & 0x7F | 0x80) << 8 | (i >>> 14);
+            buf.writeMedium(w);
+        } else if ((i & (0xFFFFFFFF << 28)) == 0) {
+            int w = (i & 0x7F | 0x80) << 24 | (((i >>> 7) & 0x7F | 0x80) << 16)
+                    | ((i >>> 14) & 0x7F | 0x80) << 8 | (i >>> 21);
+            buf.writeInt(w);
+        } else {
+            int w = (i & 0x7F | 0x80) << 24 | ((i >>> 7) & 0x7F | 0x80) << 16
+                    | ((i >>> 14) & 0x7F | 0x80) << 8 | ((i >>> 21) & 0x7F | 0x80);
+            buf.writeInt(w);
+            buf.writeByte(i >>> 28);
+        }
     }
+    // Graphene end
 }
diff --git a/src/main/java/net/minecraft/network/Varint21FrameDecoder.java b/src/main/java/net/minecraft/network/Varint21FrameDecoder.java
index 1f71357a4caef4b2cbff95b560d0f3df268b3621..12477cca9838528dc3bc637fe22a675989e95672 100644
--- a/src/main/java/net/minecraft/network/Varint21FrameDecoder.java
+++ b/src/main/java/net/minecraft/network/Varint21FrameDecoder.java
@@ -1,23 +1,36 @@
 package net.minecraft.network;
 
 import io.netty.buffer.ByteBuf;
-import io.netty.buffer.Unpooled;
+//import io.netty.buffer.Unpooled; // Graphene - now unused
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.ByteToMessageDecoder;
-import io.netty.handler.codec.CorruptedFrameException;
+//import io.netty.handler.codec.CorruptedFrameException; // Graphene - now unused
 import java.util.List;
 import javax.annotation.Nullable;
 
+// Graphene start - krypton: network.pipeline
+import me.steinborn.krypton.network.VarintByteDecoder;
+import static me.steinborn.krypton.network.util.WellKnownExceptions.BAD_LENGTH_CACHED;
+import static me.steinborn.krypton.network.util.WellKnownExceptions.VARINT_BIG_CACHED;
+// Graphene end
+
 public class Varint21FrameDecoder extends ByteToMessageDecoder {
+    // Graphene start - now unused
+    /*
     private static final int MAX_VARINT21_BYTES = 3;
     private final ByteBuf helperBuf = Unpooled.directBuffer(3);
     @Nullable
     private final BandwidthDebugMonitor monitor;
+    */
+    // Graphene end
+    private final VarintByteDecoder reader = new VarintByteDecoder(); // Graphene - krypton: network.pipeline
 
     public Varint21FrameDecoder(@Nullable BandwidthDebugMonitor packetSizeLogger) {
-        this.monitor = packetSizeLogger;
+        //this.monitor = packetSizeLogger; // Graphene - now unused
     }
 
+    // Graphene start - now unused
+    /*
     protected void handlerRemoved0(ChannelHandlerContext channelHandlerContext) {
         this.helperBuf.release();
     }
@@ -37,8 +50,12 @@ public class Varint21FrameDecoder extends ByteToMessageDecoder {
 
         throw new CorruptedFrameException("length wider than 21-bit");
     }
+    */
+    // Graphene end
 
     protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List<Object> list) {
+        // Graphene start - krypton: Use optimized Velocity varint decoder that reduces bounds checking
+        /*
         // Paper start - if channel is not active just discard the packet
         if (!channelHandlerContext.channel().isActive()) {
             byteBuf.skipBytes(byteBuf.readableBytes());
@@ -61,5 +78,51 @@ public class Varint21FrameDecoder extends ByteToMessageDecoder {
                 list.add(byteBuf.readBytes(i));
             }
         }
+        */
+        // Graphene end
+
+        // Graphene start - krypton: network.pipeline
+        if (!channelHandlerContext.channel().isActive()) {
+            byteBuf.clear();
+            return;
+        }
+
+        reader.reset();
+
+        int varintEnd = byteBuf.forEachByte(reader);
+        if (varintEnd == -1) {
+            // We tried to go beyond the end of the buffer. This is probably a good sign that the
+            // buffer was too short to hold a proper varint.
+            if (reader.getResult() == VarintByteDecoder.DecodeResult.RUN_OF_ZEROES) {
+                // Special case where the entire packet is just a run of zeroes. We ignore them all.
+                byteBuf.clear();
+            }
+            return;
+        }
+
+        if (reader.getResult() == VarintByteDecoder.DecodeResult.RUN_OF_ZEROES) {
+            // this will return to the point where the next varint starts
+            byteBuf.readerIndex(varintEnd);
+        } else if (reader.getResult() == VarintByteDecoder.DecodeResult.SUCCESS) {
+            int readVarint = reader.getReadVarint();
+            int bytesRead = reader.getBytesRead();
+            if (readVarint < 0) {
+                byteBuf.clear();
+                throw BAD_LENGTH_CACHED;
+            } else if (readVarint == 0) {
+                // skip over the empty packet(s) and ignore it
+                byteBuf.readerIndex(varintEnd + 1);
+            } else {
+                int minimumRead = bytesRead + readVarint;
+                if (byteBuf.isReadable(minimumRead)) {
+                    list.add(byteBuf.retainedSlice(varintEnd + 1, readVarint));
+                    byteBuf.skipBytes(minimumRead);
+                }
+            }
+        } else if (reader.getResult() == VarintByteDecoder.DecodeResult.TOO_BIG) {
+            byteBuf.clear();
+            throw VARINT_BIG_CACHED;
+        }
+        // Graphene end
     }
 }
diff --git a/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java b/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java
index 8f4a964a0863b1be834c1ea1e3d49092516f9258..b5f3f199c9bb3c1054170f9046544a6dbc75746f 100644
--- a/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java
+++ b/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java
@@ -24,6 +24,13 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
     public void channelRead(ChannelHandlerContext channelhandlercontext, Object object) {
         ByteBuf bytebuf = (ByteBuf) object;
 
+        // Graphene start - krypton: network.pipeline
+        if (!channelhandlercontext.channel().isActive()) {
+            bytebuf.clear();
+            return;
+        }
+        // Graphene end
+
         // Paper start - Make legacy ping handler more reliable
         if (this.buf != null) {
             try {
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index ec268189b19b6fa5c4521f96ce211a531db35ec5..751ef8c1738c87e533715f279565b32deee2a575 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -73,6 +73,21 @@ import org.bukkit.configuration.file.YamlConfiguration;
 
 public class Main {
 
+    // Graphene start - krypton: change Netty PooledByteBufAllocator arena size
+    static {
+        // By default, Netty allocates 16MiB arenas for the PooledByteBufAllocator. This is too much
+        // memory for Minecraft, which imposes a maximum packet size of 2MiB! We'll use 4MiB as a more
+        // sane default.
+        //
+        // Note: io.netty.allocator.pageSize << io.netty.allocator.maxOrder is the formula used to
+        // compute the chunk size. We lower maxOrder from its default of 11 to 9. (We also use a null
+        // check, so that the user is free to choose another setting if need be.)
+        if (System.getProperty("io.netty.allocator.maxOrder") == null) {
+            System.setProperty("io.netty.allocator.maxOrder", "9");
+        }
+    }
+    // Graphene end
+
     private static final Logger LOGGER = LogUtils.getLogger();
 
     public Main()
